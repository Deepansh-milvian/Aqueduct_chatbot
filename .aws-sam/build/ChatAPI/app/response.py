###############
# This file receives the query results from Athena,
# reads the results, 
# creates a prompt and sends them to bedrock 
# for NL response generation for user query"
###############

import json
from app.llm_response_generation import generate_response_from_llm



def format_response(query_results):
    """
    Processes Athena query results and generates a natural language response.

    Args:
        query_results (list): The raw results from Athena query execution.

    Returns:
        str: A natural language response generated by AWS Bedrock.
    """
    try:
        # Parse Athena results into a structured format
        structured_data = parse_athena_results(query_results)

        # Create a prompt for the LLM
        prompt = create_prompt(structured_data)

        # Call the LLM response generation function
        natural_language_response = generate_response_from_llm(prompt)

        return natural_language_response

    except Exception as e:
        raise Exception(f"Failed to format response: {str(e)}")


def parse_athena_results(query_results):
    """
    Parses Athena query results into a structured format.

    Args:
        query_results (list): The raw results from Athena query execution.

    Returns:
        dict: A structured representation of the query results.
    """
    try:
        # Extract headers from the first row
        headers = [col["VarCharValue"] for col in query_results[0]["Data"]]

        # Extract data rows
        data = []
        for row in query_results[1:]:
            values = [col.get("VarCharValue", None) for col in row["Data"]]
            data.append(dict(zip(headers, values)))

        return {
            "headers": headers,
            "rows": data
        }
    except Exception as e:
        raise Exception(f"Error parsing Athena results: {str(e)}")


def create_prompt(structured_data):
    """
    Creates a prompt for Bedrock based on the structured query results.

    Args:
        structured_data (dict): The parsed query results.

    Returns:
        str: A prompt to send to AWS Bedrock.
    """
    headers = structured_data["headers"]
    rows = structured_data["rows"]

    # Convert headers and rows to a readable table format
    table_str = " | ".join(headers) + "\n"
    table_str += "-" * (len(headers) * 15) + "\n"
    for row in rows:
        row_str = " | ".join(row.get(header, "N/A") for header in headers)
        table_str += row_str + "\n"

    # Create a natural language prompt
    prompt = f"""
    The following data was retrieved from the database:

    {table_str}

    Generate a concise, natural language response summarizing this data for the user.
    """
    return prompt
